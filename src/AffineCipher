// src/AffineCipher.cpp
#include "AffineCipher.h"

AffineCipher::AffineCipher(int m_val, int a_val, int b_val) {
  m = m_val;
  a = a_val;
  b = b_val;
  a_inv = modInverse(a, m);
}

int AffineCipher::gcd(int a, int b) {
  while (b != 0) {
    int temp = a % b;
    a = b;
    b = temp;
  }
  return a;
}

int AffineCipher::modInverse(int a, int m) {
  a = a % m;
  for (int x = 1; x < m; x++) {
    if ((a * x) % m == 1) {
      return x;
    }
  }
  return -1; // Если обратного элемента не существует
}

int AffineCipher::encrypt(int x) {
  if (x >= 0 && x <= 9) {
    int y = (a * x + b) % m;
    return y;
  }
  else {
    return -1; // Ошибка: входное значение не является цифрой
  }
}

int AffineCipher::decrypt(int y) {
  if (y >= 0 && y <= 9) {
    if (a_inv == -1) {
      return -1; // Ошибка: обратного элемента не существует
    }
    int x = (a_inv * (y - b + m)) % m;
    return x;
  }
  else {
    return -1; // Ошибка: входное значение не является цифрой
  }
}

String AffineCipher::encryptString(String number) {
  String encrypted = "";
  for (unsigned int i = 0; i < number.length(); i++) {
    char c = number.charAt(i);
    if (c >= '0' && c <= '9') { // Шифрование
      int x = c - '0';
      int y = encrypt(x);
      if (y == -1) return "";
      encrypted += String(y);
    } 
    else if (c == '.' || c == '-') { // 
      encrypted += c;
    } 
    else { // 
      return "";
    }
  }
  return encrypted;
}

String AffineCipher::decryptString(String number) {
  String decrypted = "";
  for (unsigned int i = 0; i < number.length(); i++) {
    char c = number.charAt(i);
    if (c >= '0' && c <= '9') { // Дешифрование
      int y = c - '0';
      int x = decrypt(y);
      if (x == -1) return "";
      decrypted += String(x);
    } 
    else if (c == '.' || c == '-') { 
      decrypted += c;
    } 
    else { 
      return "";
    }
  }
  return decrypted;
}
